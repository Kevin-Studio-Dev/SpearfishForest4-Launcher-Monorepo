name: Release
on:
  push:
    paths:
      - 'HeliosLauncher/package.json'
    branches:
      - master
      - 'prerelease/*'
    tags-ignore:
      - '*'

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest]

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Get version and branch info
        id: get-version
        run: |
          cd HeliosLauncher
          node -e "console.log('version=' + require('./package.json').version)"
          echo "GitHub Ref: $GITHUB_REF"

          if [ \"$GITHUB_REF\" == \"refs/heads/master\" ]; then
            echo "This is master branch"
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
          else
            echo "This is prerelease branch" 
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Install Dependencies
        run: |
          cd HeliosLauncher
          npm install

      - name: Update release type for prerelease
        if: ${{ contains(github.ref, 'prerelease/') }}
        run: |
          cd HeliosLauncher
          node -e "
            const fs = require('fs');
            const pkg = require('./package.json');
            pkg.build.publish[0].releaseType = 'prerelease';
            fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2));
          "

      - name: Build/Release Electron app
        uses: samuelmeuli/action-electron-builder@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          release: false
          package_root: HeliosLauncher
          mac_certs: ${{ secrets.mac_certs }}
          mac_certs_password: ${{ secrets.mac_certs_password }}
          windows_certs: ${{ secrets.windows_certs }}
          windows_certs_password: ${{ secrets.windows_certs_password }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CSC_IDENTITY_AUTO_DISCOVERY: false
          DEBUG: electron-builder

      - name: List dist directory
        run: |
          cd HeliosLauncher/dist
          ls -la
        shell: bash

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist-${{ matrix.os }}
          path: |
            HeliosLauncher/dist/*
            !HeliosLauncher/dist/builder-debug.yml

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Get version and branch info
        id: get-version
        run: |
          cd HeliosLauncher
          node -e "console.log('version=' + require('./package.json').version)"
          echo "GitHub Ref: $GITHUB_REF"

          if [ \"$GITHUB_REF\" == \"refs/heads/master\" ]; then
            echo "This is master branch"
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
          else
            echo "This is prerelease branch" 
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Delete existing prerelease tag
        if: ${{ steps.get-version.outputs.is_prerelease }}
        run: |
          git tag -d prerelease || true
          git push origin :refs/tags/prerelease || true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update latest tag
        if: ${{ !steps.get-version.outputs.is_prerelease }}
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git tag -f latest
          git push -f origin latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ steps.get-version.outputs.is_prerelease == 'true' && format('Pre-release v{0}', steps.get-version.outputs.version) || format('Release v{0}', steps.get-version.outputs.version) }}
          tag_name: ${{ steps.get-version.outputs.is_prerelease == 'true' && 'prerelease' || format('v{0}', steps.get-version.outputs.version) }}
          draft: false
          prerelease: ${{ steps.get-version.outputs.is_prerelease == 'true' }}
          files: |
            artifacts/dist-macos-latest/!(builder-debug.yml)
            artifacts/dist-windows-latest/!(builder-debug.yml)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Delete latest release assets
        if: ${{ !steps.get-version.outputs.is_prerelease }}
        uses: dev-drprasad/delete-older-releases@v0.2.1
        with:
          keep_latest: 0
          delete_tags: false
          delete_tag_pattern: latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create latest release
        if: ${{ !steps.get-version.outputs.is_prerelease }}
        uses: softprops/action-gh-release@v1
        with:
          name: Latest Release
          tag_name: latest
          draft: false
          prerelease: false
          files: |
            artifacts/dist-macos-latest/!(builder-debug.yml)
            artifacts/dist-windows-latest/!(builder-debug.yml)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
